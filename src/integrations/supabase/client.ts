
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://psryoyugyimibjhwhvlh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzcnlveXVneWltaWJqaHdodmxoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzM4NTM2NDMsImV4cCI6MjA0OTQyOTY0M30.HqVFT7alWrZtjf1cHxeAeqpsWMjVEnnXfVtwesYga-0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    debug: true, // Activer le mode debug pour mieux comprendre les problèmes d'auth
  }
});

// Fonction utilitaire pour nettoyer l'état d'authentification
export const cleanupAuthState = () => {
  console.log('Cleaning up auth state...');
  
  try {
    // Suppression des jetons d'authentification standard
    localStorage.removeItem('supabase.auth.token');
    
    // Suppression de toutes les clés d'authentification Supabase de localStorage
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && (key.startsWith('supabase.auth.') || key.includes('sb-'))) {
        console.log('Removing localStorage key:', key);
        localStorage.removeItem(key);
      }
    }
    
    // Suppression de sessionStorage si utilisé
    for (let i = 0; i < sessionStorage.length; i++) {
      const key = sessionStorage.key(i);
      if (key && (key.startsWith('supabase.auth.') || key.includes('sb-'))) {
        console.log('Removing sessionStorage key:', key);
        sessionStorage.removeItem(key);
      }
    }
    
    console.log('Auth state cleanup completed');
  } catch (error) {
    console.error('Error cleaning up auth state:', error);
  }
};
